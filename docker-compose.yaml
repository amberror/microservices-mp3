services:
  resource-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USERNAME}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
      POSTGRES_DB: ${RESOURCE_DB_NAME}
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    #depends_on:
    #  autoheal:
    #    condition: service_started
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${RESOURCE_DB_USERNAME}" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  song-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_USER: ${SONG_DB_USERNAME}
      POSTGRES_PASSWORD: ${SONG_DB_PASSWORD}
      POSTGRES_DB: ${SONG_DB_NAME}
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    #depends_on:
    #  autoheal:
    #    condition: service_started
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${SONG_DB_USERNAME}" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  storage-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_USER: ${STORAGE_DB_USERNAME}
      POSTGRES_PASSWORD: ${STORAGE_DB_PASSWORD}
      POSTGRES_DB: ${STORAGE_DB_NAME}
    volumes:
      - ./init-scripts/storage-db:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
    #depends_on:
    #  autoheal:
    #    condition: service_started
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${STORAGE_DB_USERNAME}" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  resource-service:
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    environment:
      #SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      #SPRING_DATASOURCE_USERNAME: ${RESOURCE_DB_USERNAME}
      #SPRING_DATASOURCE_PASSWORD: ${RESOURCE_DB_PASSWORD}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      RESOURCE_PROCESSOR_TOPIC_NAME: ${RESOURCE_PROCESSOR_TOPIC_NAME}
      RESOURCE_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR:-1}
      RESOURCE_PARTITION_COUNT: ${RESOURCE_PARTITION_COUNT:-1}
      RESOURCE_ACKS_CONFIG: ${RESOURCE_ACKS_CONFIG:-all}
      RESOURCE_RESULT_PROCESSOR_TOPIC_NAME: ${RESOURCE_RESULT_PROCESSOR_TOPIC_NAME}
      RESOURCE_RESULT_PROCESSOR_CONSUMER_GROUP_ID: ${RESOURCE_RESULT_PROCESSOR_CONSUMER_GROUP_ID}
      RESOURCE_RESULT_PROCESSOR_OFFSET_RESET: ${RESOURCE_RESULT_PROCESSOR_OFFSET_RESET}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      APPLICATION_NAME: ${RESOURCE_SERVICE_NAME}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
      EUREKA_PROMETHEUS_SCAPE_ENABLED: ${EUREKA_PROMETHEUS_SCAPE_ENABLED}
      USE_MESSAGE_BROKER: ${USE_MESSAGE_BROKER}
      USE_STORAGE_SERVICE: ${USE_STORAGE_SERVICE}
      AWS_S3_RESOURCE_BUCKET_URL: ${RESOURCE_S3_URL}
      AWS_S3_REGION: ${AWS_STATIC_REGION}
      AWS_S3_ACCESS_KEY_ID: ${AWS_RESOURCE_SERVICE_ACCESS_KEY}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_RESOURCE_SERVICE_ACCESS_SECRET}
      AWS_SQS_ACCESS_KEY: ${AWS_RESOURCE_SERVICE_ACCESS_KEY}
      AWS_SQS_ACCESS_SECRET: ${AWS_RESOURCE_SERVICE_ACCESS_SECRET}
      AWS_SQS_REGION: ${AWS_STATIC_REGION}
      AWS_SQS_RESOURCE_QUEUE: ${AWS_RESOURCE_QUEUE}
      AWS_SQS_RESOURCE_QUEUE_DLQ: ${AWS_RESOURCE_QUEUE_DLQ}
      AWS_SQS_RESOURCE_RESULT_QUEUE_DLQ: ${AWS_RESOURCE_RESULT_QUEUE_DLQ}
      AWS_SQS_RESOURCE_RESULT_QUEUE: ${AWS_RESOURCE_RESULT_QUEUE}
      AWS_SECRETS_MANAGER_REGION: ${AWS_STATIC_REGION}
      AWS_SECRETS_MANAGER_ACCESS_KEY: ${AWS_RESOURCE_SERVICE_ACCESS_KEY}
      AWS_SECRETS_MANAGER_SECRET: ${AWS_RESOURCE_SERVICE_ACCESS_SECRET}
      AWS_SECRETS_RESOURCE_DB_ARN: ${AWS_SECRET_RESOURCE_DB_ARN}
    ports:
      - "8081:8081"
    depends_on:
      resource-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      song-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8081/actuator/health"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  song-service:
    build:
      context: ./song-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SONG_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SONG_DB_PASSWORD}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      APPLICATION_NAME: ${SONG_SERVICE_NAME}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
      EUREKA_PROMETHEUS_SCAPE_ENABLED: ${EUREKA_PROMETHEUS_SCAPE_ENABLED}
    ports:
      - "8082:8082"
    depends_on:
      song-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8082/actuator/health"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 13
    labels:
      autoheal-feature: true

  resource-processor:
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    environment:
      RESOURCE_PROCESSOR_CONSUMER_GROUP_ID: ${RESOURCE_PROCESSOR_CONSUMER_GROUP_ID}
      RESOURCE_PROCESSOR_OFFSET_RESET: ${RESOURCE_PROCESSOR_OFFSET_RESET}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      RESOURCE_PROCESSOR_TOPIC_NAME: ${RESOURCE_PROCESSOR_TOPIC_NAME}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      RESOURCE_RESULT_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR:-1}
      RESOURCE_RESULT_PARTITION_COUNT: ${RESOURCE_RESULT_PARTITION_COUNT:-1}
      RESOURCE_RESULT_ACKS_CONFIG: ${RESOURCE_RESULT_ACKS_CONFIG:-all}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      APPLICATION_NAME: ${RESOURCE_PROCESSOR_NAME}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
      EUREKA_PROMETHEUS_SCAPE_ENABLED: ${EUREKA_PROMETHEUS_SCAPE_ENABLED}
      USE_MESSAGE_BROKER: ${USE_MESSAGE_BROKER}
      AWS_SQS_ACCESS_KEY: ${AWS_RESOURCE_PROCESSOR_ACCESS_KEY}
      AWS_SQS_ACCESS_SECRET: ${AWS_RESOURCE_PROCESSOR_ACCESS_SECRET}
      AWS_SQS_REGION: ${AWS_STATIC_REGION}
      AWS_SQS_RESOURCE_QUEUE: ${AWS_RESOURCE_QUEUE}
      AWS_SQS_RESOURCE_QUEUE_DLQ: ${AWS_RESOURCE_QUEUE_DLQ}
      AWS_SQS_RESOURCE_RESULT_QUEUE_DLQ: ${AWS_RESOURCE_RESULT_QUEUE_DLQ}
      AWS_SQS_RESOURCE_RESULT_QUEUE: ${AWS_RESOURCE_RESULT_QUEUE}
    ports:
      - "8083:8083"
    depends_on:
      resource-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8083/actuator/health"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${STORAGE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${STORAGE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${STORAGE_DB_PASSWORD}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      APPLICATION_NAME: ${STORAGE_SERVICE_NAME}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
      EUREKA_PROMETHEUS_SCAPE_ENABLED: ${EUREKA_PROMETHEUS_SCAPE_ENABLED}
    ports:
      - "8084:8084"
    depends_on:
      storage-db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8084/actuator/health"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    environment:
      APPLICATION_NAME: ${SERVICE_REGISTRY_NAME}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
    ports:
      - "8761:8761"
    depends_on:
    #  autoheal:
    #    condition: service_started
      grafana:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8761/actuator/health"]
      start_period: 15s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    environment:
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      APPLICATION_NAME: ${GATEWAY_SERVICE_NAME}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
      EUREKA_PROMETHEUS_SCAPE_ENABLED: ${EUREKA_PROMETHEUS_SCAPE_ENABLED}
      DEFAULT_ISSUER: ${DEFAULT_ISSUER}
    ports:
      - "8080:8080"
    depends_on:
      service-registry:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-sf", "http://localhost:8080/actuator/health" ]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      TEMPO_SPANS_URL: ${TEMPO_SPANS_URL}
      LOKI_LOGS_URL: ${LOKI_LOGS_URL}
      APPLICATION_NAME: ${AUTH_SERVICE_NAME}
      LOKI_LOG_TEMPLATE: ${LOKI_LOG_TEMPLATE}
      EUREKA_PROMETHEUS_SCAPE_ENABLED: ${EUREKA_PROMETHEUS_SCAPE_ENABLED}
      DEFAULT_ISSUER: ${DEFAULT_ISSUER}
    ports:
      - "8085:8085"
    depends_on:
      service-registry:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-sf", "http://localhost:8085/actuator/health" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  localstack:
    image: localstack/localstack
    ports:
      - 4510-4559:4510-4559
      - 4566:4566
    environment:
      - SERVICES=s3
      - DEBUG=1
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
    volumes:
      - ./init-scripts/localstack/localstack-ready.sh:/etc/localstack/init/ready.d/localstack-ready.sh
    #depends_on:
    #  autoheal:
    #    condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -sf localhost:4566/_localstack/init/ready | grep -q '\"completed\": true,'"]
      start_period: 15s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "2181:2181"
    #depends_on:
    #  autoheal:
    #    condition: service_started
    labels:
      autoheal-feature: true

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://${KAFKA_OUTSIDE_URL},HOST://${KAFKA_HOST_URL}
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR:-1}
      KAFKA_TOPICS: ${RESOURCE_PROCESSOR_TOPIC_NAME}
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 20000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list" ]
      start_period: 15s
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      autoheal-feature: true

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning/datasources
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started

  tempo:
    image: grafana/tempo:latest
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
    container_name: tempo
    command:
      - "-config.file=/etc/tempo/config.yaml"
    ports:
      - "3200:3200"
      - "9411:9411"
      - "9095:9095"
    volumes:
      - ./grafana/tempo-data:/var/lib/tempo
      - ./grafana/tempo-config/tempo-config.yaml:/etc/tempo/config.yaml
    environment:
      - TEMPO_STORAGE_BACKEND=local
      - TEMPO_LOG_LEVEL=info

  loki:
    image: grafana/loki:main
    container_name: loki
    command:
      - "-config.file=/etc/loki/local-config.yaml"
    ports:
      - "3100:3100"

  #autoheal:
  #  image: willfarrell/autoheal:latest
  #  tty: true
  #  restart: always
  #  environment:
  #    AUTOHEAL_INTERVAL: 60
  #    AUTOHEAL_START_PERIOD: 100
  #    AUTOHEAL_DEFAULT_STOP_TIMEOUT: 10
  #    AUTOHEAL_CONTAINER_LABEL: autoheal-feature
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock

volumes:
  prom_data:
  grafana_data: