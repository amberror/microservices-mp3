services:
  resource-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USERNAME}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
      POSTGRES_DB: resource-db
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    depends_on:
      autoheal:
        condition: service_started
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${RESOURCE_DB_USERNAME}" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  song-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_USER: ${SONG_DB_USERNAME}
      POSTGRES_PASSWORD: ${SONG_DB_PASSWORD}
      POSTGRES_DB: song-db
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    depends_on:
      autoheal:
        condition: service_started
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${SONG_DB_USERNAME}" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  resource-service:
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${RESOURCE_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${RESOURCE_DB_PASSWORD}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
      RESOURCE_S3_URL: ${RESOURCE_S3_URL}
      RESOURCE_S3_REGION: ${RESOURCE_S3_REGION}
      RESOURCE_S3_ACCESS_KEY_ID: ${RESOURCE_S3_ACCESS_KEY_ID}
      RESOURCE_S3_SECRET_ACCESS_KEY: ${RESOURCE_S3_SECRET_ACCESS_KEY}
      RESOURCE_S3_BUCKET_NAME: ${RESOURCE_S3_BUCKET_NAME}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      RESOURCE_PROCESSOR_TOPIC_NAME: ${RESOURCE_PROCESSOR_TOPIC_NAME}
      RESOURCE_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR:-1}
      RESOURCE_PARTITION_COUNT: ${RESOURCE_PARTITION_COUNT:-1}
      RESOURCE_ACKS_CONFIG: ${RESOURCE_ACKS_CONFIG:-all}
      SONG_INTEGRATION_BASE_URL: ${SONG_INTEGRATION_BASE_URL}
    ports:
      - "8081:8081"
    depends_on:
      resource-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      localstack:
        condition: service_healthy
      kafka:
        condition: service_healthy
      song-service:
        condition: service_healthy
      autoheal:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081/actuator/health"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  song-service:
    build:
      context: ./song-service
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${SONG_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SONG_DB_PASSWORD}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
    ports:
      - "8082:8082"
    depends_on:
      song-db:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      autoheal:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8082/actuator/health"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  resource-processor:
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    environment:
      RESOURCE_PROCESSOR_CONSUMER_GROUP_ID: ${RESOURCE_PROCESSOR_CONSUMER_GROUP_ID}
      RESOURCE_PROCESSOR_OFFSET_RESET: ${RESOURCE_PROCESSOR_OFFSET_RESET}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      RESOURCE_PROCESSOR_TOPIC_NAME: ${RESOURCE_PROCESSOR_TOPIC_NAME}
      EUREKA_REGISTRATION_URL: ${EUREKA_REGISTRATION_URL}
    ports:
      - "8083:8083"
    depends_on:
      resource-service:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      autoheal:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8083/actuator/health"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      autoheal:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8761/actuator/health"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  localstack:
    image: localstack/localstack
    ports:
      - 4510-4559:4510-4559
      - 4566:4566
    environment:
      - SERVICES=s3
      - DEBUG=1
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
    volumes:
      - ./init-scripts/localstack/localstack-ready.sh:/etc/localstack/init/ready.d/localstack-ready.sh
    depends_on:
      autoheal:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -sf localhost:4566/_localstack/init/ready | grep -q '\"completed\": true,'"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 6
    ports:
      - "2181:2181"
    depends_on:
      autoheal:
        condition: service_started
    labels:
      autoheal-feature: true

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://${KAFKA_OUTSIDE_URL}
      KAFKA_LISTENERS: INSIDE://${KAFKA_OUTSIDE_URL}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR:-1}
      KAFKA_TOPICS: ${RESOURCE_PROCESSOR_TOPIC_NAME}
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 20000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
      autoheal:
        condition: service_started
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list" ]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      autoheal-feature: true

  autoheal:
    image: willfarrell/autoheal:latest
    tty: true
    restart: always
    environment:
      AUTOHEAL_INTERVAL: 60
      AUTOHEAL_START_PERIOD: 120
      AUTOHEAL_DEFAULT_STOP_TIMEOUT: 10
      AUTOHEAL_CONTAINER_LABEL: autoheal-feature
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
