spring.application.name=${APPLICATION_NAME:resource-service}
server.port=8081

# Common DB credentials example
#spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/resource-db}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
#spring.datasource.driver-class-name=org.postgresql.Driver

resource.db.secrets.arn=${RESOURCE_DB_SECRETS_ARN:none}

# Hibernate settings
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Eureka server URL
eureka.client.service-url.defaultZone=${EUREKA_REGISTRATION_URL:http://localhost:8761/eureka/}
eureka.instance.metadata-map.prometheus.scrape=${EUREKA_PROMETHEUS_SCAPE_ENABLED:false}
eureka.instance.metadata-map.prometheus.path=/actuator/prometheus
eureka.instance.metadata-map.prometheus.port=${server.port}
eureka.instance.lease-renewal-interval-in-seconds=10
eureka.instance.lease-expiration-duration-in-seconds=40

# Kafka general
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}

# Kafka producer
kafka.producer.resource.topic.name=${RESOURCE_PROCESSOR_TOPIC_NAME:resource-processor-topic}
kafka.resource.replication.factor=${RESOURCE_REPLICATION_FACTOR:1}
kafka.resource.partition.count=${RESOURCE_PARTITION_COUNT:1}
kafka.producer.resource.acks=${RESOURCE_ACKS_CONFIG:all}
kafka.producer.resource.reties=${RESOURCE_RETRIES:3}
kafka.producer.resource.maxInFlight=${RESOURCE_MAX_MESSAGES_IN_FLIGHT:5}
kafka.producer.resource.allRetriesTimeout=${RESOURCE_ALL_RETRIES_TIMEOUT:20000}
kafka.producer.resource.timeoutPerRequest=${RESOURCE_REQUEST_TIMEOUT:5000}
kafka.producer.resource.idempotence=${RESOURCE_PRODUCER_IDEMPOTENCE:true}

# Kafka consumer
kafka.consumer.resource-result.topic.name=${RESOURCE_RESULT_PROCESSOR_TOPIC_NAME:resource-processor-result-topic}
kafka.resource-result.consumer.group.id=${RESOURCE_RESULT_PROCESSOR_CONSUMER_GROUP_ID:resource-result-processors}
kafka.resource-result.consumer.auto.offset.reset=${RESOURCE_RESULT_PROCESSOR_OFFSET_RESET:earliest}

# Feign client config
feign.default.client.config.period=${DEFAULT_FEIGN_CLIENT_FIRST_RETRY_PERIOD:100}
feign.default.client.config.maxPeriod=${DEFAULT_FEIGN_CLIENT_MAX_RETRY_INTERVAL:1000}
feign.default.client.config.maxAttempts=${DEFAULT_FEIGN_CLIENT_RETRIES:3}

# Health check
eureka.client.healthcheck.enabled=true
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=always

# Circuit breaker
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=5
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5000ms
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3

resilience4j.circuitbreaker.instances.storageIntegrationCB.baseConfig=default

# Fallback
fallback.staging.bucket.name=resource-staging-bucket-mp3-microservices-stack
fallback.permanent.bucket.name=resource-permanent-bucket-mp3-microservices-stack

fallback.staging.bucket.path=/staging
fallback.permanent.bucket.path=/permanent

# Distributed logs
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Tracing & Metrics
logging.pattern.correlation=[${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.pattern.console=${LOKI_LOG_TEMPLATE:%d{yyyy-MM-dd HH:mm:ss} ${logging.pattern.correlation} %-5level %logger{36} - %msg%n}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.zipkin.tracing.endpoint=${TEMPO_SPANS_URL:http://localhost:9411/api/v2/spans}
management.tracing.sampling.probability=1.0
loki.logs.url=${LOKI_LOGS_URL:http://localhost:3100/loki/api/v1/push}

# Dynamic Messaging strategies
messaging.service.type=${USE_MESSAGE_BROKER:kafka}
storage.service.type=${USE_STORAGE_SERVICE:localstack}

# Message brokers
cloud.aws.sqs.access.key=${AWS_SQS_ACCESS_KEY:test}
cloud.aws.sqs.secret=${AWS_SQS_ACCESS_SECRET:test}
cloud.aws.sqs.region=${AWS_SQS_REGION:us-west-1}

cloud.aws.sqs.resource.queue.name=${AWS_SQS_RESOURCE_QUEUE:resource-queue}
cloud.aws.sqs.resource.dlq.name=${AWS_SQS_RESOURCE_QUEUE_DLQ:resource-dlq}

cloud.aws.sqs.resource.result.queue.name=${AWS_SQS_RESOURCE_RESULT_QUEUE:resource-result-queue}
cloud.aws.sqs.resource.result.dlq.name=${AWS_SQS_RESOURCE_RESULT_QUEUE_DLQ:resource-result-dlq}

spring.cloud.aws.sqs.listener.auto-create-dlq=false

# Secret Manager
cloud.aws.secrets.manager.resource.region=${AWS_SECRETS_MANAGER_REGION:us-east-1}
cloud.aws.secrets.manager.resource.accessKeyId=${AWS_SECRETS_MANAGER_ACCESS_KEY:test}
cloud.aws.secrets.manager.resource.secretAccessKey=${AWS_SECRETS_MANAGER_SECRET:test}
cloud.aws.secrets.manager.resource.db.credentials.arn=${AWS_SECRETS_RESOURCE_DB_ARN:db-secret}

# S3 bucket
cloud.aws.s3.resource.url=${AWS_S3_RESOURCE_BUCKET_URL:http://localhost:4566}
cloud.aws.s3.resource.region=${AWS_S3_REGION:us-west-1}
cloud.aws.s3.resource.accessKeyId=${AWS_S3_ACCESS_KEY_ID:test}
cloud.aws.s3.resource.secretAccessKey=${AWS_S3_SECRET_ACCESS_KEY:test}